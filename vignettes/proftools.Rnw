%%\VignetteIndexEntry{Using proftools}
\documentclass[nojss]{jss}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% declarations for jss.cls %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% almost as usual
\author{Luke Tierney\\University of Iowa \And 
        Riad Jarjour\\University of Iowa}
\title{Examining R Profiling Data: The \pkg{proftools} Package}

%% for pretty printing and a nice hypersummary also set:
\Plainauthor{Luke Tierney, Riad Jarjour} %% comma-separated
\Plaintitle{Examining R Profiling Data:
  The proftools Package} %% without formatting
%$ \Shorttitle{\pkg{foo}: A Capitalized Title} %% a short title (if necessary)

%% an abstract and keywords
\Abstract{
  This note introduces the \pkg{proftools} package for examining R
  profiling data and illustrates its use with a small example.
}
\Keywords{\pkg{proftools}, profiling, R, \code{Rprof}, \code{profr}}
\Plainkeywords{proftools, profiling, R, Rprof, profr} %% without formatting
%% at least one keyword must be supplied

%% publication information
%% NOTE: Typically, this can be left commented and will be filled out by the technical editor
%% \Volume{50}
%% \Issue{9}
%% \Month{June}
%% \Year{2012}
%% \Submitdate{2012-06-04}
%% \Acceptdate{2012-06-04}

%% The address of (at least) one author should be given
%% in the following format:
\Address{
  Luke Tierney\\
  Department of Statistics and Actuarial Science\\
  Faculty of Statistics\\
  University of Iowa\\
  Iowa City, USA\\
  E-mail: \email{luke-tierney@uiowa.edu}\\
  URL: \url{http://homepage.stat.uiowa.edu/~luke/}
  
  Riad Jarjour\\
  Department of Statistics and Actuarial Science\\
  Faculty of Statistics\\
  University of Iowa\\
  Iowa City, USA\\
  E-mail: \email{riad-jarjour@uiowa.edu}
}
%% It is also possible to add a telephone and fax number
%% before the e-mail in the following format:
%% Telephone: +43/512/507-7103
%% Fax: +43/512/507-2851

%% for those who use Sweave please include the following line (with % symbols):
%% need no \usepackage{Sweave.sty}

%% end of declarations %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\begin{document}

%% include your article here, just as usual
%% Note that you should use the \pkg{}, \proglang{} and <<>>=} commands.

\section{Introduction}
<<echo=false,results=hide>>=
library("proftools")
options(keep.source = TRUE)
@ %%
R includes a sampling based profiling mechanism that records
information about calls on the stack at specified time intervals.  The
function \code{summaryRprof} provides a simple interface for examining
this data. The \pkg{proftools} package provides a much more extensive
set of tools for summarizing, visualizing, and subsetting profiling
data.

The \pkg{proftools} package includes an example script \code{bootlm.R}
in the \code{samples} directory that includes several examples from
the \pkg{boot} package and fitting a simple linear model. The file
path can be obtained as
<<>>=
srcfile <- system.file("samples", "bootlmEx.R", package = "proftools")
@  %%

The traditional way to collect profiling data in R is to call
\code{Rprof} to start profiling, run the code to be profiled, and then
call \code{Rprof} again to end profiling. For example, to collect GC
and line information if available while running the example script,
you could use
<<eval = FALSE>>=
profout <- tempfile()
Rprof(file = profout, gc.profiling = TRUE, line.profiling = TRUE)
source(srcfile)
Rprof(NULL)
pd <- readProfileData(profout)
unlink(profout)
@ %%
The \pkg{proftools} provides the alternative
<<>>=
pd <- profileExpr(source(srcfile))
@ %%
\code{profileExpr} by default enables GC and source information to be
collected. It also trims off stack information leading up to the
\code{profileExpr} call.

\section{Summary Functions}
The most basic summary function is \code{funSummary} for summarizing
profile results at the function level. It produces information similar
to the result returned by R's \code{summaryRprof} but in a more usable
form:
<<>>=
head(funSummary(pd), 10)
@ %%
Data can also be summarized by call:
<<>>=
head(callSummary(pd), 10)
@ %%

When source information is available in the profile data the
\code{srcSummary} function can be used to summarize at the source line
level; only lines appearing in the sample are included:
<<>>=
srcSummary(pd)
@ %%
The function \code{annotateSource} can show the full files with
profiling annotations.

A useful way to examine profile data is to look for hot execution
paths.  This approach sorts functions called at top level by the
amount of time spent in their top level calls; within each top level
call to a function \code{f} the funcitons called by \code{f} are
sorted by the amount of time spent in them within the top level call
to \code{f}; and the process continues for higher level calls. The
function \code{hotPaths} produces a hot path summary; the
\code{maxdepth} argument determines how far up the call stack the
paths are followed:
<<>>=
hotPaths(pd, maxdepth = 6)
@ %%

%% Other summaries are \code{pathSummary} and \code{srcSummary}.
%% **** filtering

\section{Filtering Profile Data}
In many cases it can be useful to focus on a particular subset of the
\code{pd} object. We can filter the \code{pd} object by selecting or
dropping certain functions. For example,
<<>>=
hotPaths(filterProfileData(pd, skip = 4), maxdepth = 2)
@ 
<<>>=
filteredPD <- filterProfileData(pd, select = "glm", focus = TRUE)
@ %%
Now we can use the filtered object in our calls to summary functions
or plots, for example

<<>>=
hotPaths(filteredPD, maxdepth = 10) 
@

\section{Call Graphs}
A printed version of the call graph, similar to the call graph
produced by \code{gprof}, can be obtained by running (output has been
omitted)
<<eval=FALSE>>=
printProfileCallGraph(pd)
@ %%
Alternatively, if you have the packages graph and Rgraphviz from
Bioconductor installed, then you can view the call graph within R
using

<<fig=true>>=
plotProfileCallGraph(pd, style = google.style)
@ %%
\\
This plot isn't very readable; but focusing on a particular
section will make more useful. For example,
<<fig=true>>=
plotProfileCallGraph(
    filterProfileData(
        filterProfileData(pd, select="glm", focus=TRUE),maxdepth=10 ),
    style = google.style)
@ %%

\section{Other Visualizations}
\subsection{Flame Graphs}
We can also plot a hot paths flame graph with
<<fig=true>>=
flameGraph(pd, order = "hot")
@
\\
A flame graph of the filtered data is produced by
<<fig=true>>=
flameGraph(filteredPD)
@ %%
\\
Furthermore, an svg file of the graph can be outputted by using the
svg argument:
<<eval=FALSE>>=
flameGraph(pd, svg = "graph.svg", order = "hot")
@ 

Alternative \code{order} values are \code{"time"} \code{"alpha"}.
Specifying \code{"time"} presents the calls in the order in which they
occurred.
<<fig=TRUE>>=
flameGraph(pd, order = "time")
@ 

\subsection{Callee Tree Maps}
A callee tree map can be obtained with
<<fig=true>>=
calleeTreeMap(pd)
@
\\

\end{document}
